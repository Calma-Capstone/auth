steps:
  # This step creates a new image, adding the Cloud SQL Auth Proxy to allow Cloud Build to connect securely to Cloud SQL
  - id: "docker-layer"
    name: "gcr.io/cloud-builders/docker"
    entrypoint: bash
    args:
      - "-c"
      - "echo \"FROM ${_IMAGE_NAME}\nCOPY --from=gcr.io/cloudsql-docker/gce-proxy /cloud_sql_proxy /cloudsql/cloud_sql_proxy\" > Dockerfile-proxy && docker build -f Dockerfile-proxy -t ${_IMAGE_NAME}-proxy ."

  # This step runs the Django migration commands using the image built in the previous step
  # It starts the Cloud SQL Auth Proxy as a background process, then runs the Django commands.
  - id: "migrate"
    name: "${_IMAGE_NAME}-proxy"
    env: 
      - USE_CLOUD_SQL_AUTH_PROXY=true
    secretEnv:
      - AUTH_SECRET
      - ADMIN_PASSWORD
    entrypoint: launcher
    args: 
      - "bash"
      - "-c"
      - "(/cloudsql/cloud_sql_proxy -instances=${_INSTANCE_CONNECTION_NAME}=tcp:5432 & sleep 2) && 
          python3 manage.py migrate"

substitutions:
  _INSTANCE_CONNECTION_NAME: "${PROJECT_ID}:${_REGION}:auth-db"
  _IMAGE_NAME: "gcr.io/${PROJECT_ID}/auth-image"
  _REGION: asia-southeast2
  _SERVICE_ACCOUNT: "auth-cloudrun-serviceaccount@calma-capstone.iam.gserviceaccount.com"

availableSecrets:
  secretManager:
    - versionName: projects/${PROJECT_ID}/secrets/auth-secret/versions/latest
      env: AUTH_SECRET
    - versionName: projects/${PROJECT_ID}/secrets/admin-password/versions/latest
      env: ADMIN_PASSWORD

serviceAccount: projects/${PROJECT_ID}/serviceAccounts/${_SERVICE_ACCOUNT}
options:
  logging: CLOUD_LOGGING_ONLY
  dynamicSubstitutions: true